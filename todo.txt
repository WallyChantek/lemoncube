-- Current To-do List ----------------------------------------------------------
-- Normal priority
[ ] Z-ordering/layering of entities
[ ] Come up with a name for the framework already
[ ] Look into canvases
[ ] Make it so you can push/pop gamestates without having to completely change?
    Like for pause menus and stuff

-- Low priority
[/] Fonts
  [/] Better-looking error handler screen
  [ ] Default bitmap font for framework
[/] Documentation
  [x] Get basic design/build system in place
  [ ] Index page
  [ ] Write other pages
  - Check EXT: tags
[/] Controller/joystick/input object
  [x] Base implementation
  [ ] Handle joysticks (just buttons & hats)
[/] Various TODO's
[/] Animation
  [x] Add animation functions
  [ ] Test animation class
  [ ] Entity/animation offsets
[ ] Camera
  [ ] Trailing mechanism
  [ ] Parallaxing backgrounds
[ ] Menu



-- Long-term Goals -------------------------------------------------------------
- Animation timeline application
  - Opens spritesheet, separates into frames based on specified width/height
    (basically like how quads are generated)
  - Allows you to set up data
    - Origin point
    - List of action points
    - Animation speed
  - Saves data as JSON or whatever, LemonCube automatically searches in
    directory for JSON file when loading image data
  - When re-opening image, also automatically tried to load data if present
- Map editor application (probably just make these in JavaScript)


-- Temp Stuff ------------------------------------------------------------------
Adds a new input or changes an existing input in a Joystick instance.
  Parameters:
    - inputType
      - The device/mechanism this input is coming from.
      - Available values:
        - Option.INPUT_KB
          - Keyboard
        - Option.INPUT_JOY_BTN
          - Buttons on a joystick/gamepad
        - Option.INPUT_JOY_AXIS
          - Analog stick or joystick mechanism
        - Option.INPUT_JOY_HAT
          - Generally a d-pad type mechanism
    - inputName
      - An arbitrary, meaningful name to identify this input with.
      - Example: "left", "right", "a", "b", "fire1", "fire2", etc.
    - input
      - The actual input code to type this input to. Please see Love's
        documentation for information (TODO: Link to API pages)